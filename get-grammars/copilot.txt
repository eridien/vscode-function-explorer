tree-sitter-wrapper/
├── grammars/
│   ├── c/
│   ├── python/
│   └── ...
├── scripts/
│   └── fetch-grammars.js
├── parser.js
├── package.json


================= package.json ================
{
  "name": "tree-sitter-wrapper",
  "version": "1.0.0",
  "type": "module",
  "dependencies": {
    "node-tree-sitter": "^0.21.0",
    "simple-git": "^3.19.1"
  }
}


================= scripts/fetch-grammars.js ================
import simpleGit from 'simple-git';
import { join } from 'path';
import { mkdirSync } from 'fs';

const grammars = {
  c: 'https://github.com/tree-sitter/tree-sitter-c.git',
  python: 'https://github.com/tree-sitter/tree-sitter-python.git',
  javascript: 'https://github.com/tree-sitter/tree-sitter-javascript.git'
};

const grammarDir = join(process.cwd(), 'grammars');
mkdirSync(grammarDir, { recursive: true });

for (const [lang, repo] of Object.entries(grammars)) {
  const targetDir = join(grammarDir, lang);
  console.log(`📥 Cloning ${lang} grammar...`);
  await simpleGit().clone(repo, targetDir);
}


================= parser.js ================
import Parser from 'node-tree-sitter';
import fs from 'fs';
import { join } from 'path';

const parser = new Parser();
const C = Parser.Language.load(join('grammars', 'c', 'build', 'release', 'tree-sitter-c.node'));

parser.setLanguage(C);

const sourceCode = `
int main() {
  return 0;
}
`;

const tree = parser.parse(sourceCode);
console.log(tree.rootNode.toString());


================= scripts/fetch-and-build-grammars.js ================
import simpleGit from 'simple-git';
import { join } from 'path';
import { mkdirSync, existsSync } from 'fs';
import { execSync } from 'child_process';

const grammars = {
  c: 'https://github.com/tree-sitter/tree-sitter-c.git',
  python: 'https://github.com/tree-sitter/tree-sitter-python.git',
  javascript: 'https://github.com/tree-sitter/tree-sitter-javascript.git'
};

const grammarDir = join(process.cwd(), 'grammars');
mkdirSync(grammarDir, { recursive: true });

const git = simpleGit();

for (const [lang, repo] of Object.entries(grammars)) {
  const targetDir = join(grammarDir, lang);

  if (!existsSync(targetDir)) {
    console.log(`📥 Cloning ${lang} grammar...`);
    await git.clone(repo, targetDir);
  } else {
    console.log(`🔁 ${lang} already exists. Skipping clone.`);
  }

  // Compile grammar using tree-sitter-cli
  try {
    console.log(`🛠️ Compiling ${lang} grammar...`);
    execSync('tree-sitter generate', { cwd: targetDir, stdio: 'inherit' });
    execSync('tree-sitter build', { cwd: targetDir, stdio: 'inherit' });
    console.log(`✅ Finished compiling ${lang}\n`);
  } catch (err) {
    console.error(`❌ Failed to compile ${lang}: ${err.message}`);
  }
}


================= npm install ================

npm install -g tree-sitter-cli
npm install simple-git


================= init-config ================
tree-sitter init-config
produces >>>>>> C:\Users\mark\AppData\Roaming\tree-sitter\config.json


============= add your grammar directory path to config.json =============
{
  "parser-directories": [
    "C:\Users\mark\apps\tree-sitter-wrapper\grammars"
  ]
}


============ Make sure your grammar folder has ============
binding.gyp
grammar.js
package.json


============ node-gyp build ============
npm install
// This will automatically invoke node-gyp configure && 
//            node-gyp build behind the scenes (if binding.gyp is present).
build/
└── Release/
    └── tree_sitter_<language>_binding.node


================= Verify it works ===============
tree-sitter dump-languages


================= misc ===============
tree-sitter clear-cache

================= parse tester ===============
import Parser from 'node-tree-sitter';
import path from 'path';

const parser = new Parser();
const Lang = Parser.Language.load(path.join('grammars', 'javascript', 'build', 'Release', 'tree_sitter_javascript_binding.node'));
parser.setLanguage(Lang);

const tree = parser.parse('function greet() { return "hi"; }');
console.log(tree.rootNode.toString());
